var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CuTe","category":"page"},{"location":"#CuTe","page":"Home","title":"CuTe","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CuTe.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CuTe]","category":"page"},{"location":"#CuTe.ArrayEngine","page":"Home","title":"CuTe.ArrayEngine","text":"ArrayEngine{T, L} <: Engine{T} <: DenseVector{T}\n\nA owning vector of type T with length L. It is stack-allocated and mutable. It should behaves like a StaticStrideArray with from StrideArrays package.\n\nExamples\n\nfunction test_alloc()\n    x = ArrayEngine{Float32}(one, static(10))\n    GC.@preserve x begin sum(ViewEngine(x)) end\nend\n\n@test @allocated(test_alloc()) == 0\n\n\n\n\n\n","category":"type"},{"location":"#CuTe.CuTeArray","page":"Home","title":"CuTe.CuTeArray","text":"CuTeArray(engine::DenseVector, layout::Layout)\nCuTeArray{T}(::UndefInitializer, layout::StaticLayout)\nCuTeArray(ptr::Ptr{T}, layout::StaticLayout)\n\nCreate a CuTeArray from an engine and a layout. See also ArrayEngine and ViewEngine.\n\nExamples\n\njulia> slayout = @Layout (5, 2);\n\njulia> array_engine = ArrayEngine{Float32}(one, static(10));\n\njulia> CuTeArray(array_engine, slayout)\n5×2 CuTeArray{Float32, 2, ArrayEngine{Float32, 10}, Layout{2, Tuple{StaticInt{5}, StaticInt{2}}, Tuple{StaticInt{1}, StaticInt{5}}}} with indices static(1):static(5)×static(1):static(2):\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n\n julia> slayout = @Layout (5,3,2)\n(static(5), static(3), static(2)):(static(1), static(5), static(15))\n\njulia> CuTeArray{Float32}(undef, slayout) # uninitialized owning array\n5×2 CuTeArray{Float32, 2, ArrayEngine{Float32, 10}, Layout{2, Tuple{Static.StaticInt{5}, Static.StaticInt{2}}, Tuple{Static.StaticInt{1}, Static.StaticInt{5}}}} with indices static(1):static(5)×static(1):static(2):\n -9.73642f-16   8.09f-43\n  8.09f-43     -1.64739f13\n  3.47644f36    8.09f-43\n  4.5914f-41    0.0\n -9.15084f-21   0.0\n\njulia> A = ones(10); # non-owning array\n\njulia> CuTeArray(pointer(A), slayout)\n5×2 CuTeArray{Float64, 2, ViewEngine{Float64, Ptr{Float64}}, Layout{2, Tuple{Static.StaticInt{5}, Static.StaticInt{2}}, Tuple{Static.StaticInt{1}, Static.StaticInt{5}}}} with indices static(1):static(5)×static(1):static(2):\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n\n\n\n\n\n","category":"type"},{"location":"#CuTe.ViewEngine","page":"Home","title":"CuTe.ViewEngine","text":"ViewEngine{T, P} <: Engine{T} <: DenseVector{T}\n\nA non-owning view of a memory buffer. P is the type of the pointer.\n\n\n\n\n\n","category":"type"},{"location":"#CuTe.coord_to_coord-Tuple{Tuple, Tuple, Tuple}","page":"Home","title":"CuTe.coord_to_coord","text":"Transoform a coordinate in one shape to a coordinate in another shape.\n\n\n\n\n\n","category":"method"},{"location":"#CuTe.make_fragment_like-Tuple{Layout{1, <:Tuple{Union{Tuple, Static.StaticInt}}, <:Tuple{Union{Tuple, Static.StaticInt}}}}","page":"Home","title":"CuTe.make_fragment_like","text":"Make a layout of the same shape with the first mode being col-major, and with the rest following the given order.\n\n\n\n\n\n","category":"method"},{"location":"#CuTe.make_ordered_layout-Tuple{Any, Any}","page":"Home","title":"CuTe.make_ordered_layout","text":"make_ordered_layout(shape, order)\nmake_ordered_layout(layout)\n\nConstruct a compact layout with the given shape and the stride is following the given order.\n\nExamples\n\njulia> CuTe.make_ordered_layout((3,5), (2, 6))\n(3, 5):(static(1), 3)\n\njulia> CuTe.make_ordered_layout((3,5), (10, 2))\n(3, 5):(5, static(1))\n\n\n\n\n\n","category":"method"},{"location":"#CuTe.@Layout","page":"Home","title":"CuTe.@Layout","text":"Layout(shape, stride=nothing)\n\nConstruct a static layout with the given shape and stride.\n\nArguments\n\nshape: a tuple of integers or a single integer\nstride: a tuple of integers, a single integer, GenColMajor or GenRowMajor\n\n\n\n\n\n","category":"macro"}]
}
